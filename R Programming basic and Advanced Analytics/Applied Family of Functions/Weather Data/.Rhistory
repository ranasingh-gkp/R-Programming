getwd()
setwd("C:\\Users\\user\\Desktop\\a\\Lists")
getwd()
setwd("C:\\Users\\Raftaar Singh\\Desktop\\check\\Lists")
getwd()
#fin <- read.csv("future 500.csv")
util <- read.csv("machine utilization.csv", na.strings=c(""))# replace all impty value with NA
util
head(util)
tail(util)
str(util)
names(util)
summary(util)
#data utilization column
util$Utilization = 1- util$Percent.Idle
# handling date-time in R
?POSIXct
util$posixtime <- as.POSIXct(util$Timestamp, format = "%d/%m/%Y %H:%M")
head(util,12)
summary(util)
#rearrange columns in df
util$Timestamp <-NULL
util<- util[,c(4,1,2,3)]
head(util,12)
#list
RL1<- util[util$Machine=="RL1",]
summary(RL1)
RL1$Machine <- factor(RL1$Machine)
summary(RL1)
util_stat_rl1 <- c(min(RL1$Utilization, na.rm=T),mean(RL1$Utilization, na.rm=T),max(RL1$Utilization, na.rm=T))
which(RL1$Utilization <0.90)
length(which(RL1$Utilization <0.90))
util_under_90_flag <- length(which(RL1$Utilization <0.90))>0
util_under_90_flag
list_rl1 <- list( "RL1", util_stat_rl1, util_under_90_flag ) #create list
list_rl1
#renaming component of list
names(list_rl1)
names(list_rl1) <- c("machine", "states", "lowthreshold")
names(list_rl1)
#extracting component of list
#[]-always return list
#[[]]-always return actual object
#$ -same as [[]]
list_rl1
list_rl1[1]
list_rl1[[1]]
list_rl1$machine
list_rl1[2]
typeof(list_rl1)
#how  would you access  3rd element of vector states
list_rl1[[2]][3]
list_rl1$states[3]
#--addinng and deleting list component
list_rl1[4] <- "new information"
list_rl1$unknownhours <- RL1[is.na(RL1$Utilization), "posixtime"]
list_rl1
#---ADD DATAFRAME
list_rl1[4] <-NULL #NUMERATION GET SHIFTED
list_rl1$Data <-RL1
list_rl1
summary(list_rl1)
#subsetting list
list_rl1
list_rl1[[4]][1]#first value of 4 element
list_rl1$unknownhours[1]
list_rl1[1:3]#list contain 3 element
list_rl1[c(1,4)]
#double equire breaket are not for subsetting
#double equire breaket are not for subsetting
#[] is for subsetting
#double equire breaket are not for subsetting
#[] is for subsetting
#list_rl1[[1:3]]#error
#double equire breaket are not for subsetting
#[] is for subsetting
#list_rl1[[1:3]]#error
#double equire breaket are not for subsetting
#[] is for subsetting
#list_rl1[[1:3]]#error
#double equire breaket are not for subsetting
#[] is for subsetting
#list_rl1[[1:3]]#error
#double equire breaket are not for subsetting
#[] is for subsetting
#list_rl1[[1:3]]#error
#double equire breaket are not for subsetting
#[] is for subsetting
#list_rl1[[1:3]]#error
#double equire breaket are not for subsetting
#[] is for subsetting
#list_rl1[[1:3]]#error
#double equire breaket are not for subsetting
#[] is for subsetting
#list_rl1[[1:3]]#error
#-----time series plot
install.packages("ggplot2")
library(ggplot2)
p+ ggplot(data=util)
p<- ggplot(data=util)
p+geom_line(aes(x=posixtime, y=Utilization,colour= Machine ), size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90, colour="Grey", size=1.2)
p+geom_line(aes(x=posixtime, y=Utilization,colour= Machine ), size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90, colour="Grey", size=1.2, linetype=3)
myplot<-p+geom_line(aes(x=posixtime, y=Utilization,colour= Machine ), size=1.2)+
facet_grid(Machine~.)+
geom_hline(yintercept = 0.90, colour="Grey", size=1.2, linetype=3)
list_rl1$plot <- myplot
list_rl1
summary(list_rl1)
str(list_rl1)
getwd()
setwd("C:\\Users\\user\\Desktop\\a\\Applied Family of Functions\\Weather Data")
getwd()
chicago <- read.csv("Chicago-F", row.names = 1,na.strings=c(""))#(row.names = 1)take row name from first column
chicago <- read.csv("Chicago-F.csv", row.names = 1,na.strings=c(""))#(row.names = 1)take row name from first column
chicago <- read.csv("Chicago-F.csv", row.names = 1,na.strings=c(""))#(row.names = 1)take row name from first column
View(chicago)
View(chicago)
Chicago <- read.csv("Chicago-F.csv", row.names = 1,na.strings=c(""))#(row.names = 1)take row name from first column
Houston <- read.csv("Houston-F.csv", row.names = 1,na.strings=c(""))#(row.names = 1)take row name from first column
NewYork <- read.csv("NewYork-F.csv", row.names = 1,na.strings=c(""))#(row.names = 1)take row name from first column
SanFrancisco <- read.csv("SanFrancisco-F.csv", row.names = 1,na.strings=c(""))#(row.names = 1)take row name from first column
View(Chicago)
View(chicago)
Chicago <- read.csv("Chicago-F.csv", row.names = 1,na.strings=c(""))#(row.names = 1)take row name from first column
Houston <- read.csv("Houston-F.csv", row.names = 1,na.strings=c(""))#(row.names = 1)take row name from first column
NewYork <- read.csv("NewYork-F.csv", row.names = 1,na.strings=c(""))#(row.names = 1)take row name from first column
SanFrancisco <- read.csv("SanFrancisco-F.csv", row.names = 1,na.strings=c(""))#(row.names = 1)take row name from first column
#IS THEY ARE DATA FRAME
is.data.frame(Chicago)
#we dont need data frame because all elementant are same, they are numeric so no real need for data frame
#so lets convery into matrix
Chicago <- as.matrix(Chicago)
#we dont need data frame because all elementant are same, they are numeric so no real need for data frame
#so lets convery into matrix
Chicago <- as.matrix(Chicago)
Houston <- as.matrix(Houston)
NewYork <- as.matrix(NewYork)
SanFrancisco <- as.matrix(SanFrancisco)
# check
is.matrix(SanFrancisco)
# check
is.matrix(Chicago)
#lets put all in list
weather <- list(Chicago,Houston,NewYork,SanFrancisco)
weather[3]
weather[[3]]
weather[3]
weather[[3]]
View(Houston)
weather$houston
#lets put all in list
weather <- list(Chicago,Houston,NewYork,SanFrancisco)
weather[3]#only element
weather[[3]]# final matrix
weather$houston
weather$Houston
weather$Houston
weather$Houston
#lets put all in list
weather <- list(Chicago,NewYork,Houston,SanFrancisco)
weather[3]#only element
weather[[3]]# final matrix
weather$Houston
weather[3]#only element
weather[[3]]# final matrix
weather$Houston
#lets put all in list
weather <- list(Chicago=Chicago,NewYork=NewYork,Houston=Houston,SanFrancisco=SanFrancisco)
weather[3]#only element
weather[[3]]# final matrix
weather$Houston
#lets put all in list
weather <- list(Chicago,NewYork,Houston,SanFrancisco)
weather
weather#list is not having proper name so create name so you can access using $ sign
weather
weather <- list(Chicago=Chicago,NewYork=NewYork,Houston=Houston,SanFrancisco=SanFrancisco)
weather
weather[3]#only element
weather[[3]]# final matrix
weather[3]#only element of list
weather[[3]]# final matrix
weather$Houston
#------use apply
?apply
apply(Chicago,1,mean)
a<- apply(Chicago,1,mean)
typeof(a)
apply(Chicago,1,mean)
# analysis one city
apply(Chicago, 1,max)
# analysis one city
Chicago
apply(Chicago, 2, max)
# compare
apply(Chicago, 1,max)
apply(Houston, 1,max)
apply(NewYork, 1,max)
apply(SanFrancisco, 1,max)
# recreating the apply function with loop
chicago
# recreating the apply function with loop
Chicago
#1. via loop
output <- NULL
mean(Chicago[i,1])
for(i in 1:5) {
mean(Chicago[i,1])
}
output[i] <- mean(Chicago[i,1])
for(i in 1:5) {
output[i] <- mean(Chicago[i,1])
}
#1. via loop
output <- NULL
for(i in 1:5) {
output[i] <- mean(Chicago[i,1])
}
output
names(output) <- rownames(chicago)
names(output) <- rownames(Chicago)
output
# or
apply(Chicago,1,mean)
#1. via loop
output <- NULL
for(i in 1:5) {
output[i] <- mean(Chicago[i,])
}
output
names(output) <- rownames(Chicago)
output
# or
apply(Chicago,1,mean)
# varify
apply(Chicago,1,mean)
#------lapply
?lapply
chicago
Chicago
t(Chicago)
weather
lapply(weather, rbind, NewRow=1:12)
?rowMeans
rowMeans(chicago)
rowMeans(Chicago)
lapply(weather, rowMeans)
#-----combining lapply with []operator
weather
weather$Chicago[1,]
weather$Chicago[1,1]
weather$Chicago[1,]
weather[[1]][1,1
]
lapply(weather, "["1,1)
lapply(weather, "[",1,1)
lapply(weather, "[", ,3)
lapply(weather, "[", ,3)
